#include <gtest/gtest.h>
#include <MD5Modified/md5.hpp>
#include "helpers.hpp"

namespace
{

using namespace testHelpers;

const uint32_t IV[4] = {
	0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476};

// const uint32_t msg_0[16] = {
// 	0x02dd31d1, 0xc4eee6c5, 0x069a3d69, 0x5cf9af98,
// 	0x87b5ca2f, 0xab7e4612, 0x3e580440, 0x897ffbb8,
// 	0x0634ad55, 0x02b3f409, 0x8388e483, 0x5a417125,
// 	0xe8255108, 0x9fc9cdf7, 0xf2bd1dd9, 0x5b3c3780};
// const uint32_t msg_1[16] = {
// 	0xd11d0b96, 0x9c7b41dc, 0xf497d8e4, 0xd555655a,
// 	0xc79a7335, 0x0cfdebf0, 0x66f12930, 0x8fb109d1,
// 	0x797f2775, 0xeb5cd530, 0xbaade822, 0x5c15cc79,
// 	0xddcb74ed, 0x6dd3c55f, 0xd80a9bb1, 0xe3a7cc35};
// const uint32_t msg_0_prime[16] = {
// 	0x02dd31d1, 0xc4eee6c5, 0x069a3d69, 0x5cf9af98,
// 	0x07b5ca2f, 0xab7e4612, 0x3e580440, 0x897ffbb8,
// 	0x0634ad55, 0x02b3f409, 0x8388e483, 0x5a41f125,
// 	0xe8255108, 0x9fc9cdf7, 0x72bd1dd9, 0x5b3c3780};
// const uint32_t msg_1_prime[16] = {
// 	0xd11d0b96, 0x9c7b41dc, 0xf497d8e4, 0xd555655a,
// 	0x479a7335, 0x0cfdebf0, 0x66f12930, 0x8fb109d1,
// 	0x797f2775, 0xeb5cd530, 0xbaade822, 0x5c154c79,
// 	0xddcb74ed, 0x6dd3c55f, 0x580a9bb1, 0xe3a7cc35};

const uint8_t msg_0[64] = {
        0x02, 0xdd, 0x31, 0xd1,
        0xc4, 0xee, 0xe6, 0xc5,
        0x06, 0x9a, 0x3d, 0x69,
        0x5c, 0xf9, 0xaf, 0x98,
        0x87, 0xb5, 0xca, 0x2f,
        0xab, 0x7e, 0x46, 0x12,
        0x3e, 0x58, 0x04, 0x40,
        0x89, 0x7f, 0xfb, 0xb8,
        0x06, 0x34, 0xad, 0x55,
        0x02, 0xb3, 0xf4, 0x09,
        0x83, 0x88, 0xe4, 0x83,
        0x5a, 0x41, 0x71, 0x25,
        0xe8, 0x25, 0x51, 0x08,
        0x9f, 0xc9, 0xcd, 0xf7,
        0xf2, 0xbd, 0x1d, 0xd9,
        0x5b, 0x3c, 0x37, 0x80
};
const uint8_t msg_1[64] = {
        0xd1, 0x1d, 0x0b, 0x96,
        0x9c, 0x7b, 0x41, 0xdc,
        0xf4, 0x97, 0xd8, 0xe4,
        0xd5, 0x55, 0x65, 0x5a,
        0xc7, 0x9a, 0x73, 0x35,
        0x0c, 0xfd, 0xeb, 0xf0,
        0x66, 0xf1, 0x29, 0x30,
        0x8f, 0xb1, 0x09, 0xd1,
        0x79, 0x7f, 0x27, 0x75,
        0xeb, 0x5c, 0xd5, 0x30,
        0xba, 0xad, 0xe8, 0x22,
        0x5c, 0x15, 0xcc, 0x79,
        0xdd, 0xcb, 0x74, 0xed,
        0x6d, 0xd3, 0xc5, 0x5f,
        0xd8, 0x0a, 0x9b, 0xb1,
        0xe3, 0xa7, 0xcc, 0x35
};
const uint8_t msg_0_prime[64] = {
        0x02, 0xdd, 0x31, 0xd1,
        0xc4, 0xee, 0xe6, 0xc5,
        0x06, 0x9a, 0x3d, 0x69,
        0x5c, 0xf9, 0xaf, 0x98,
        0x07, 0xb5, 0xca, 0x2f,
        0xab, 0x7e, 0x46, 0x12,
        0x3e, 0x58, 0x04, 0x40,
        0x89, 0x7f, 0xfb, 0xb8,
        0x06, 0x34, 0xad, 0x55,
        0x02, 0xb3, 0xf4, 0x09,
        0x83, 0x88, 0xe4, 0x83,
        0x5a, 0x41, 0xf1, 0x25,
        0xe8, 0x25, 0x51, 0x08,
        0x9f, 0xc9, 0xcd, 0xf7,
        0x72, 0xbd, 0x1d, 0xd9,
        0x5b, 0x3c, 0x37, 0x80
};
const uint8_t msg_1_prime[64] = {
        0xd1, 0x1d, 0x0b, 0x96,
        0x9c, 0x7b, 0x41, 0xdc,
        0xf4, 0x97, 0xd8, 0xe4,
        0xd5, 0x55, 0x65, 0x5a,
        0x47, 0x9a, 0x73, 0x35,
        0x0c, 0xfd, 0xeb, 0xf0,
        0x66, 0xf1, 0x29, 0x30,
        0x8f, 0xb1, 0x09, 0xd1,
        0x79, 0x7f, 0x27, 0x75,
        0xeb, 0x5c, 0xd5, 0x30,
        0xba, 0xad, 0xe8, 0x22,
        0x5c, 0x15, 0x4c, 0x79,
        0xdd, 0xcb, 0x74, 0xed,
        0x6d, 0xd3, 0xc5, 0x5f,
        0x58, 0x0a, 0x9b, 0xb1,
        0xe3, 0xa7, 0xcc, 0x35
};

TEST(CollisionTest, FirstKnownCollision)
{
	uint32_t h0[4];
	uint32_t h1[4];
	uint32_t H0[4];
	uint32_t H1[4];

	MD5Modified::MD5HashNonPadded(msg_0, h0, IV);
	MD5Modified::MD5HashNonPadded(msg_0_prime, h1, IV);
	MD5Modified::MD5HashNonPadded(msg_0, H0, h0);
	MD5Modified::MD5HashNonPadded(msg_0, H1, h1);

	EXPECT_TRUE(compareWords(H0, H1));
	printWord(H0);
	printWord(H1);

}

} // namespace
